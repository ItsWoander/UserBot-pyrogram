
from pyrogram import Client,filters
from pyrogram import enums
from pyrogram.enums import  ParseMode
from pyrogram.types import Message
import time
import asyncio
import cowsay
import os
from google import genai
from google.genai import types
from pathlib import Path
import json
from dotenv import load_dotenv
while True:
    try:
    
        with open('config.json','r')as file:
            bd = json.load(file)
            bd.setdefault('model', "gemini-2.0-flash")
            bd.setdefault('white', [])
            break
    except FileNotFoundError:
        with open('config.json', 'w') as file:
            bd = {'model':"gemini-2.0-flash",'white': []}
            json.dump(bd,file,indent=4)
            print('–§–∞–π–ª config.json —Å—Ç–≤–æ—Ä–µ–Ω–æ')

try:
    load_dotenv('config.env')
    api_hash = os.getenv('API_HASH')
    api_id = int(os.getenv('API_ID'))
    api_key = os.getenv('API_KEY')
except:
    raise FileNotFoundError('–î–û–î–ê–ô–¢–ï –§–ê–ô–õ config.env –¢–ê –í–í–ï–î–Ü–¢–¨ –ü–û–¢–†–Ü–ë–ù–Ü –î–ê–ù–Ü')



client = Client(name='session', api_id=api_id, api_hash=api_hash)
ai_client = genai.Client(api_key=api_key)


def not_is_white(id_user):
    with ('config.json', 'r') as file:
        bd = json.load(file)
        if id_user in bd['white']:
            return False
        else:
            return True
def add_white(id_user):
    with open('config.json', 'r') as file:
           bd = json.load(file)
           print(bd['white'])
           bd['white'].append(id_user)
           json.dumps(bd)
    with open('config.json', 'w') as file:
        json.dumps(bd)
        json.dump(bd,file,indent=4)

def del_white(id_user):
    with open('config.json', 'r') as file:
           bd = json.load(file)
           print(bd['white'])
           bd['white'].remove(id_user)
           
    with open('config.json', 'w') as file:
        json.dumps(bd)
        json.dump(bd,file,indent=4)



@client.on_message(filters.command(commands='start_host',prefixes=['!','.']))
async def host(client:Client, message:Message):
    while True:
        await client.send_message('xto_ya_uabot', '/profile')
        await asyncio.sleep(300)


@client.on_message(filters.command(commands=['audio', '–ø–æ—è—Å–Ω–∏','–∞—É–¥–∏–æ'],prefixes=['!','.']))
async def wav(client:Client, message:Message):
    print(1)
    print(message.reply_to_message.media)
    print(message.reply_to_message,message.reply_to_message.media )
    print(message.reply_to_message.media == "MessageMediaType.VOICE")
    try:
        if  message.reply_to_message.voice:
            await message.react("üëÄ")
            temp_dir = Path("temp")
            temp_dir.mkdir(parents=True, exist_ok=True)  # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            temp_file = temp_dir / "1.ogg"

            await message.reply_to_message.download(str(temp_file))

            file_a = ai_client.files.upload(file=str(temp_file))
            with open('config.json', 'r') as file:
                bd = json.load(file)
                model = bd['model']
            context = "–ü–æ—Å–ª—É—Ö–∞–π –∞—É–¥—ñ–æ —ñ –∫–∏–Ω—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é"
            response =ai_client.models.generate_content(model=model,contents=[context, file_a], config=types.GenerateContentConfig(temperature=1.0))
            os.remove(temp_file)
            await message.reply(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è:\n{response.text}")
    except Exception as e:
        os.remove(temp_file)
        await message.reply(e)
        
        


@client.on_message(filters.command(commands=['list', 'white','–±—ñ–ª–∏–π'],prefixes=['!','.']))
async def white_list(client:Client, message:Message):
    if message.reply_to_message != None:
        text = message.text.split()
        mode = text[1]
        if str(mode) == "add":
            add_white(message.reply_to_message.id)
            await message.react("üëç")
            
        if str(mode) == "del":
            del_white(message.reply_to_message.id)
            await message.react("üëç")
            


@client.on_message(filters.command(commands=['setmodel', '—Å–µ—Ç–º–æ–¥–µ–ª','—Å–µ—Ç–º–æ–¥–µ–ª—å','—Å–µ—Ç–≥–µ–º—ñ–Ω—ñ','–º–æ–¥–µ–ª—å','model','setgemini'],prefixes=['!','.']))
async def setmodel(client:Client, message:Message):
        text = message.text.split()
        if len(text) == 1:
            with open('config.json', 'r') as file:
                bd = json.load(file)
                model = bd['model']
            await message.reply(text=f"–ú–æ–¥–µ–ª—å : {model}")
            return
        models = text[1]
        with open('config.json', 'r') as file:
            bd = json.load(file)
            bd['model'] = models
            
        with open('config.json', 'w') as file:
            json.dumps(bd)
            json.dump(bd,file,indent=4)
            
            
        print(models)
        await message.reply(text=f"–ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: {models}")




@client.on_message(filters.command(commands=['models', '–º–æ–¥–µ–ª—ñ','–≥–µ–º—ñ–Ω—ñ','gemini'],prefixes=['!','.']))
async def gemini(client:Client,message:Message):
    await message.reply(text=f"–ú–æ–¥–µ–ª—ñ:\ngemini-2.0-flash\ngemini-2.0-flash-lite\ngemini-1.5-flash\ngemini-1.5-flash-8b\ngemini-1.5-pro\ntext-embedding-004")
    return

@client.on_message(filters.command(commands=['unban', 'unblock','–∞–Ω–±–ª–æ–∫','–∞–Ω–±–∞–Ω'],prefixes=['!','.']))
async def unban(client:Client,message:Message):
        if message.reply_to_message != None:
            id_user = message.reply_to_message.from_user.id
            await client.unblock_user(id_user)
            await message.react("üëç")


@client.on_message(filters.command(commands=['ban', 'block','–±–ª–æ–∫','–±–∞–Ω'],prefixes=['!','.']))
async def ban(client:Client,message:Message):
            id_user = message.reply_to_message.from_user.id
            await client.block_user(id_user)
            await message.react("üëç")

@client.on_message(filters.command(commands=['url', '—Å–∫–∞—á','–∑–∞–≤'],prefixes=['!','.']))
async def url(client: Client, message: Message): 
        url = message.text.split()
        try:
            if len(url) == 2:
            
                url = url[1]
                await message.react("üëÄ")
                await client.send_message('SaveAsBot', text=url)
                await asyncio.sleep(5)
                async for i in client.get_chat_history(chat_id="SaveAsBot", limit=3):
                    print(i)
                    if i.video != None or i.photo != None:
                        await client.forward_messages(message.chat.id,i.chat.id, i.id)
                    await message.react("")
            elif len(url) ==1 and message.reply_to_message != None:
                url = message.reply_to_message.text
                await message.react("üëÄ")
                await client.send_message('SaveAsBot', text=url)
                await asyncio.sleep(5)
                async for i in client.get_chat_history(chat_id="SaveAsBot", limit=3):
                    print(i)
                    if i.video != None or i.photo != None:
                        await client.forward_messages(message.chat.id,i.chat.id, i.id)
                await message.react("")

        except Exception as e:
                await message.react("üôà")
                await message.reply(e)
@client.on_message(filters.command(commands=['name', 'nick','–Ω—ñ–∫'],prefixes=['!','.']))
async def name(client: Client, message: Message): 
        user = message.text.split()
        user = user[1:]
        user = ' '.join(user)
        print(user)
        print(type(user))
        if len(user) >= 1:
            
            await client.send_message(message.chat.id, text='–ú—ñ–π –Ω—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ')
            await client.update_profile(first_name=user) 





@client.on_message(filters.command(commands=['–º—É–∑', 'mus','music'],prefixes=['!','.']))
async def mus(client: Client, message: Message): 
        url = message.text.split()
        try:
            if len(url) >= 2:
            
                url = url[1:]
                await message.react("üëÄ")
                await client.send_message('LyBot', text=f"–ó–Ω–∞–π–¥–∏ –ø—ñ—Å–Ω—é:{" ".join(url)}")
                await asyncio.sleep(5)
                async for i in client.get_chat_history(chat_id="LyBot", limit=1):
                    print(i)
                    if i.audio != None or i.text != None:
                        if i.text == None:
                            await client.forward_messages(message.chat.id,i.chat.id, i.id)
                        else:
                            if "–î–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" in i.text :
                                await message.reply("–ü—ñ—Å–Ω—é –Ω–µ –º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏")
                                return
                            text = "–ü—ñ—Å–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –º–æ–∂–µ –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:"
                            for num in range(0,5):
                                text += f"\n{i.reply_markup.inline_keyboard[num][0].text}"

                            await message.reply(text)
                        await message.react('')
                
        except Exception as e:
                await message.reply(e)
                print(e)

                
@client.on_message(filters.command(commands=['–∫–∞—Ä—Ç–∞', 'map','—Ç—Ä–∏–≤–æ–≥–∞'],prefixes=['!','.']))
async def map(client:Client,message:Message):
        try:
            await message.react("üëÄ")
            await client.send_message('liutsyk_bot', text='–ö–∞—Ä—Ç–∞ —Ç—Ä–∏–≤–æ–≥')
            await asyncio.sleep(3)
            async for i in client.get_chat_history(chat_id="liutsyk_bot", limit=1):
                if i.photo != None:
                    await client.forward_messages(message.chat.id,i.chat.id, i.id)
                await message.react("")
        except Exception as e:
            await message.react("üôà")
@client.on_message(filters.command(commands=['—Ç–µ–∫—Å—Ç','say','text'],prefixes=['!', '.']))
async def text(client:Client,message):
        text = message.text.split()
        text = text[1:]
        text = cowsay.get_output_string('tux', " ".join(text))
        print(type(text))
        await message.edit_text(text=f'–í–æ–Ω–æ –º–æ–≤–∏—Ç—å:<pre>{str(text)}</pre>', parse_mode=ParseMode.HTML)


@client.on_message(filters.command('–µ–º',prefixes=['!', '.']))
async def em(client:Client,message):
    id_chat = message.chat.id 
    await client.delete_messages(id_chat,message.id)
    emojis = [
    "üòÇ", "üò≠", "ü•∫", "ü§£", "‚ù§Ô∏è", "‚ú®", "üòç", "üôè", "üòä", "ü•∞",
    "üëç", "üíï", "ü§î", "üò¢", "üòÖ", "üòé", "ü§ó", "üòã", "üòÜ", "üòú",
    "üòè", "üôÑ", "üòá", "üòå", "üò≥", "üòî", "üò©", "üò°", "üò§", "üò±",
    "üò¥", "ü§©", "ü§§", "üòà", "üëÄ", "üíî", "üíñ", "üíØ", "üí™", "üëå",
    "üôå", "üëè", "ü§ù", "‚úåÔ∏è", "ü§û", "üëã", "üíÉ", "üï∫", "üéâ", "ü•≥",
    "üíÄ", "ü§°", "üëª", "üî•", "üé∂", "‚ö°", "üíã", "ü•µ", "ü•∂", "üòµ",
    "ü§Ø", "üëë", "üíé", "üöÄ", "üåü", "üçï", "üçî", "üç∫", "üéÇ", "üß†",
    "ü´°", "ü§ì", "ü§ñ", "üê±", "üê∂", "üåç", "üõ∏", "üèÜ", "üìå", "üñ§",
    "ü§°" ]
    id_mes = await message.reply(".")
    print(id_mes)
    id_mes = id_mes.id
    for i in range(50):
        for i in emojis:
            print(i)
            await client.edit_message_text(id_chat,id_mes, f'{i}')
            await asyncio.sleep(0.5)





@client.on_message(filters.command('—Å–µ—Ä',prefixes=['!', '.']))
async def em(client:Client, message:Message):
        id_chat = message.chat.id 
        heart_emojis = ["‚ù§Ô∏è", "üß°",  "üíõ",  "üíö", "üíô",  "üíú",  "ü§é",  "üñ§", "ü§ç",  "üíñ",  "üíó", "üíò", "‚ù§Ô∏è‚Äçüî•",  "‚ù§Ô∏è‚Äçü©π"]
        await client.delete_messages(id_chat,message.id)
        id_mes = await message.reply(".")
        print(id_mes)
        id_mes = id_mes.id
        while True:
            for i in range(60):
                for i in heart_emojis:
                    await client.edit_message_text(id_chat,id_mes, f'{i}')
                    await asyncio.sleep(0.4)

@client.on_message(filters.command(commands=['ai','.', '—à—ñ',],prefixes=['!', '.']))
async def ai(client:Client,message:Message):
    try:
            print(message)
            #—Ä–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –µ–ª–º–µ–Ω—Ç–∏ —Å–ø–∏—Å–∫—É
            promt = message.text.split()
            
            if len(promt) >= 2:
                await message.react("üëÄ")
                #–ø—Ä–∏–±–∏—Ä–∞—é 1 –µ–ª–º–µ–Ω—Ç(–∫–æ–º–∞–Ω–¥—É)
                promt= promt[1:]
                #–ø–æ–≤–µ—Ä—Ç–∞—é –ø—Ä–æ–±—ñ–ª–∏ –¥–æ –∑–∞–ª–∏—à–µ–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
                promt = ' '.join(promt)
                print('1')
                with open('config.json', 'r') as file:
                    bd = json.load(file)
                    model = bd['model']
                context = f"–¢–∏ –ø—Ä–∞—Ü—é—î—à —á–µ—Ä–µ–∑ –∞–ø—ñ –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–∏–º—ñ—Ç–∫–∞: –ù–µ –ø–∏—à–∏ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±—ñ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª—ñ–≤. –ù–µ –ø–∏—à–∏, —â–æ —Ü—è –ø—Ä–∏–º—ñ—Ç–∫–∞ —î.–ù–µ –ø–∏—à–∏ —â–æ —Ç–æ–±—ñ –∑—Ä–æ–∑—É–º—ñ–ª–∞ —Ü—è –ø—Ä–∏–º—ñ—Ç–∫–∞ –ü—Ä–æ–º—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:{promt}"
                response =ai_client.models.generate_content(model=model,contents=[context, promt], config=types.GenerateContentConfig(temperature=1.0))
                print(response.candidates)
                await message.react("")
                await message.reply(text=response.text)
                print(2)
            
            elif message.reply_to_message != None: #—î —Ä–µ–ø–ª–∞–π
                await message.react("üëÄ")
                promt = message.reply_to_message.text
                context = f"–¢–∏ –ø—Ä–∞—Ü—é—î—à —á–µ—Ä–µ–∑ –∞–ø—ñ –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–∏–º—ñ—Ç–∫–∞: –ù–µ –ø–∏—à–∏ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±—ñ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª—ñ–≤. –ù–µ –ø–∏—à–∏, —â–æ —Ü—è –ø—Ä–∏–º—ñ—Ç–∫–∞ —î.–ù–µ –ø–∏—à–∏ —â–æ —Ç–æ–±—ñ –∑—Ä–æ–∑—É–º—ñ–ª–∞ —Ü—è –ø—Ä–∏–º—ñ—Ç–∫–∞ –ü—Ä–æ–º—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:{promt}"
                response = ai_client.models.generate_content(model=model,contents=[context, promt], config=types.GenerateContentConfig(temperature=1.0))
                print(response.candidates)
                await message.reply(text=response.text)
                await message.react("")
            else:
                await message.react("üôà")

    except Exception as e:
        await message.react("üôà")
        await message.reply(text=e)


















client.run()
